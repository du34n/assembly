global _start

section .data
    message db "Hello HTB Academy!"
    length equ $-message

section .text
_start:
    mov rax, 1
    mov rdi, 1
    mov rsi, message
    mov rdx, length
    syscall

    mov rax, 60
    mov rdi, 0
    syscall



nasm -f elf64 helloWorld.s
ld -o helloWorld helloWorld.o
./helloWorld

assembler.sh
#!/bin/bash

fileName="${1%%.*}" # remove .s extension

nasm -f elf64 ${fileName}".s"
ld ${fileName}".o" -o ${fileName}
[ "$2" == "-g" ] && gdb -q ${fileName} || ./${fileName}


 objdump -M intel -d helloWorld

 objdump -M intel --no-show-raw-insn --no-addresses -d helloWorld

 objdump -sj .data helloWorld


 gdb installation
g3ncy3t3n3k@htb[/htb]$ sudo apt-get update
g3ncy3t3n3k@htb[/htb]$ sudo apt-get install gdb

g3ncy3t3n3k@htb[/htb]$ wget -O ~/.gdbinit-gef.py -q https://gef.blah.cat/py
g3ncy3t3n3k@htb[/htb]$ echo source ~/.gdbinit-gef.py >> ~/.gdbinit

we can debug
g3ncy3t3n3k@htb[/htb]$ gdb -q ./helloWorld
g3ncy3t3n3k@htb[/htb]$ ./assembler.sh helloWorld.s -g
we wrote a sh -g directly helps us to debug

to disamble the function we can write to gef

disas _start

we can make breakpoint while writing
gef➤  b _start
If we want to set a breakpoint at a certain address, like _start+10, we can either b *_start+10 or b *0x40100a:
gef➤  b *0x40100a

when we create another breakpoint on the code. we just need to write 'c' to step another breakpoint

and there is another statment named 'examine'
Count   The number of times we want to repeat the examine   2, 3, 10
Format  The format we want the result to be represented in  x(hex), s(string), i(instruction)
Size    The size of memory we want to examine   b(byte), h(halfword), w(word), g(giant, 8 bytes)

gef➤  x/4ig $rip
gef➤  x/s 0x402000 also we can examine the string which is stored at that spesific memory


DATA MOVEMENT 

mov rax, 1 -> rax = 1
lea rax, [rsp+5] -> rax = rsp+5 // it loads the addres the pointing the value
xchg rax,rbx // it exchanges the values of the registers

global _start

section .text

_start:
    mov rax,rsp   ; in here we just the load the addres of rsp to the rax
    mov rax,[rsp] ; but here we load the address pointing value to rax which is 0x01

However, if we wanted to load a pointer with an offset (i.e., a few addresses away from a variable or an address), we should use lea. This is why with lea the source operand is usually a variable, a label, or an address wrapped in square brackets, as in lea rax, [rsp+10]. This enables using offsets (i.e., [rsp+10]).

lea ; directly loads to the addres 


ARITHMETIC INSTRUCTIONS

unary instructions
inc rax means -> rax++ rax = 2 anymore
dec rax means -> rax--

binary instructions
two operand
add
sub
imul    

bitwise instructions
not
and
or 
xor

LOOPS
firs we need to a value to move to the rcx it shows us to how many we loop
mov rcx, 4

loop loopFib:
    add rax,rbx
    xchg rax,rbx
    loop loopFib   ;diyerekte loopumuzu çağırıyoruz


Unconditional Branching

jmp makes the code jump to somewhere if conditions are met.

for example if write a code 
loop loopFib:
    add rax,rbx
    xchg rax,rbx
    jmp loopFib   ;diyerekte loopumuzu çağırıyoruz
eğer biz buraya loop yerine jmp yazarsak gdb de göreceğizki sonsuza doğru gidicek rcx imiz azalmayacak bu bizim için kötğ haber


CONDITIONAL BRANCHING
jz  D = 0   Destination equal to Zero
jnz     D != 0  Destination Not equal to Zero
js  D < 0   Destination is Negative
jns     D >= 0  Destination is Not Negative (i.e. 0 or positive)
jg  D > S   Destination Greater than Source
jge     D >= S  Destination Greater than or Equal Source
jl  D < S   Destination Less than Source
jle     D <= S  Destination Less than or Equal Source

but how we can identify the whole thing
RFLAGS Register


The Carry Flag CF: Indicates whether we have a float.
The Parity Flag PF: Indicates whether a number is odd or even.
The Zero Flag ZF: Indicates whether a number is zero.
The Sign Flag SF: Indicates whether a register is negative.

global  _start

section .text
_start:
    xor rax, rax    ; initialize rax to 0
    xor rbx, rbx    ; initialize rbx to 0
    inc rbx         ; increment rbx to 1
    mov rcx, 10
loopFib:
    add rax, rbx    ; get the next number
    xchg rax, rbx   ; swap values
    dec rcx         ; decrement rcx counter
    jnz loopFib     ; jump to loopFib until rcx is 0

we decrement rcx when rcx == 0 zero flag turns on to 1 then jnz would no longer jump

CMP 
The Compare instruction cmp simply compares the two operands, by subtracting the second operand from first operand (i.e. D1 - S2), and then sets the necessary flags in the RFLAGS register. For example, if we use cmp rbx, 10, then the compare instruction would do 'rbx - 10', and set the flags based on the result.

global  _start

section .text
_start:
    xor rax, rax    ; initialize rax to 0
    xor rbx, rbx    ; initialize rbx to 0
    inc rbx         ; increment rbx to 1
loopFib:
    add rax, rbx    ; get the next number
    xchg rax, rbx   ; swap values
    cmp rbx, 10     ; do rbx - 10
    js loopFib      ; jump if result is <0



Using mov rcx, 10 and loop loopFib => loop 10 times
Using mov rcx, 10 and dec rcx and jnz loopFib => jump 10 times
Using cmp rbx, 10 and js loopFib => jump while rbx <10
